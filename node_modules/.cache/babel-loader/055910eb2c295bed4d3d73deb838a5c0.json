{"ast":null,"code":"class PostfixEquation {\n  constructor(infix) {\n    this.infix = infix;\n    this.priority0 = ['+', '-'];\n    this.priority1 = ['*', '/'];\n    this.priority2 = ['%'];\n    this.tempStack = [];\n    this.outputStack = [];\n  }\n\n  convertToValidInfix(infix) {\n    let tempStr = '';\n    let validInfix = [];\n    let v = infix.map(ini => {\n      if (!NaN(ini) || ini === '.') {\n        tempStr += ini;\n      } else {\n        if (tempStr != '') {\n          validInfix.push(tempStr);\n        }\n\n        validInfix.push(ini);\n      }\n    });\n  }\n\n  findCompareValue(x) {\n    if (this.priority0.includes(x)) {\n      return 0;\n    } else if (this.priority1.includes(x)) {\n      return 1;\n    } else if (this.priority2.includes(x)) {\n      return 2;\n    }\n  }\n\n  replaceHigherOperator(x) {\n    let lastElement = this.tempStack.pop();\n\n    if (this.findCompareValue(x) <= this.findCompareValue(lastElement)) {\n      this.outputStack.push(lastElement);\n    } else {\n      this.tempStack.push(lastElement); // this.tempStack.push(x);\n    }\n  }\n\n  covertToEquation() {\n    const variab = this.infix.map(individualElem => {\n      if (!isNaN(individualElem)) {\n        this.outputStack.push(individualElem);\n      } else {\n        let tempLength = this.tempStack.length;\n\n        if (tempLength == 0) {\n          this.tempStack.push(individualElem);\n        } else {\n          let tLength = tempLength;\n\n          while (this.findCompareValue(individualElem) <= this.findCompareValue(this.tempStack[tLength - 1])) {\n            // let compareElement = this.tempStack[tLength - 1];\n            this.replaceHigherOperator(individualElem);\n            tLength = this.tempStack.length;\n          }\n\n          this.tempStack.push(individualElem);\n        }\n      }\n    });\n\n    while (this.tempStack.length != 0) {\n      let elem = this.tempStack.pop();\n      this.outputStack.push(elem);\n    }\n\n    return this.outputStack;\n  }\n\n}\n\nexport default PostfixEquation;","map":{"version":3,"sources":["/home/spandan/projects-practice/calculator/src/implementation/postfixEquation.js"],"names":["PostfixEquation","constructor","infix","priority0","priority1","priority2","tempStack","outputStack","convertToValidInfix","tempStr","validInfix","v","map","ini","NaN","push","findCompareValue","x","includes","replaceHigherOperator","lastElement","pop","covertToEquation","variab","individualElem","isNaN","tempLength","length","tLength","elem"],"mappings":"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","sourcesContent":["class PostfixEquation {\n    constructor(infix) {\n        this.infix = infix;\n        this.priority0 = [\n            '+', '-'\n        ]\n        this.priority1 = [\n            '*', '/'\n        ]\n        this.priority2 = [\n            '%'\n        ]\n        this.tempStack = [];\n        this.outputStack = [];\n    }\n\n    convertToValidInfix(infix) {\n        let tempStr = '';\n        let validInfix = [];\n        let v = infix.map((ini) => {\n            if (!NaN(ini) ||  (ini === '.')) {\n                tempStr += ini;\n            }\n            else{\n                if(tempStr != ''){\n                    validInfix.push(tempStr);\n                }\n                validInfix.push(ini);\n            }\n        })\n    }\n\n    findCompareValue(x) {\n        if (this.priority0.includes(x)) {\n            return 0;\n        }\n        else if (this.priority1.includes(x)) {\n            return 1;\n        }\n        else if (this.priority2.includes(x)) {\n            return 2;\n        }\n    }\n\n    replaceHigherOperator(x) {\n        let lastElement = this.tempStack.pop();\n\n        if (this.findCompareValue(x) <= this.findCompareValue(lastElement)) {\n            this.outputStack.push(lastElement);\n        }\n        else {\n            this.tempStack.push(lastElement);\n            // this.tempStack.push(x);\n        }\n    }\n\n    covertToEquation() {\n        const variab = this.infix.map((individualElem) => {\n            if (!isNaN(individualElem)) {\n                this.outputStack.push(individualElem);\n            }\n            else {\n                let tempLength = this.tempStack.length;\n                if (tempLength == 0) {\n                    this.tempStack.push(individualElem);\n                }\n                else {\n                    let tLength = tempLength;\n                    while (this.findCompareValue(individualElem) <= this.findCompareValue(this.tempStack[tLength - 1])) {\n                        // let compareElement = this.tempStack[tLength - 1];\n                        this.replaceHigherOperator(individualElem);\n                        tLength = this.tempStack.length;\n                    }\n                    this.tempStack.push(individualElem);\n                }\n\n            }\n\n        });\n        while (this.tempStack.length != 0) {\n            let elem = this.tempStack.pop();\n            this.outputStack.push(elem);\n        }\n        return this.outputStack;\n    }\n}\n\nexport default PostfixEquation;"]},"metadata":{},"sourceType":"module"}