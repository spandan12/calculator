{"ast":null,"code":"const NUMBERS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\nfunction calculateExpression(postfix) {\n  let tempStack = [];\n  const variab = postfix.map(indElem => {\n    if (NUMBERS.includes(indElem)) {\n      tempStack.push(parseInt(indElem));\n    } else {\n      let secondNum = this.tempStack.pop();\n      let firstNum = this.tempStack.pop();\n      let tempResult = null;\n\n      switch (indElem) {\n        case '+':\n          tempResult = this.firstNum + this.secondNum;\n          break;\n\n        case '*':\n          tempResult = this.firstNum * this.secondNum;\n          break;\n\n        case '-':\n          tempResult = this.firstNum - this.secondNum;\n          break;\n\n        case '/':\n          tempResult = this.firstNum / this.secondNum;\n          break;\n\n        case '%':\n          tempResult = this.firstNum % this.secondNum;\n          break;\n      }\n\n      this.tempStack.push(tempResult);\n    }\n\n    let result = this.tempStack.pop();\n    return result;\n  });\n}\n\nmodule.exports = calculateExpression;","map":{"version":3,"sources":["/home/spandan/projects-practice/calculator/src/implementation/calculate.js"],"names":["NUMBERS","calculateExpression","postfix","tempStack","variab","map","indElem","includes","push","parseInt","secondNum","pop","firstNum","tempResult","result","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CACZ,GADY,EACP,GADO,EACF,GADE,EACG,GADH,EACQ,GADR,EACa,GADb,EACkB,GADlB,EACuB,GADvB,EAC4B,GAD5B,EACiC,GADjC,CAAhB;;AAGA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AAClC,MAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,MAAM,GAAGF,OAAO,CAACG,GAAR,CAAaC,OAAD,IAAa;AACpC,QAAIN,OAAO,CAACO,QAAR,CAAiBD,OAAjB,CAAJ,EAA+B;AAC3BH,MAAAA,SAAS,CAACK,IAAV,CAAeC,QAAQ,CAACH,OAAD,CAAvB;AACH,KAFD,MAGK;AACD,UAAII,SAAS,GAAG,KAAKP,SAAL,CAAeQ,GAAf,EAAhB;AACA,UAAIC,QAAQ,GAAG,KAAKT,SAAL,CAAeQ,GAAf,EAAf;AACA,UAAIE,UAAU,GAAG,IAAjB;;AACA,cAAQP,OAAR;AACI,aAAK,GAAL;AACIO,UAAAA,UAAU,GAAG,KAAKD,QAAL,GAAgB,KAAKF,SAAlC;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAG,KAAKD,QAAL,GAAgB,KAAKF,SAAlC;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAG,KAAKD,QAAL,GAAgB,KAAKF,SAAlC;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAG,KAAKD,QAAL,GAAgB,KAAKF,SAAlC;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAG,KAAKD,QAAL,GAAgB,KAAKF,SAAlC;AACA;AAfR;;AAiBA,WAAKP,SAAL,CAAeK,IAAf,CAAoBK,UAApB;AACH;;AAED,QAAIC,MAAM,GAAG,KAAKX,SAAL,CAAeQ,GAAf,EAAb;AACA,WAAOG,MAAP;AAEH,GA/Bc,CAAf;AAgCH;;AAEDC,MAAM,CAACC,OAAP,GAAiBf,mBAAjB","sourcesContent":["const NUMBERS = [\n    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'\n];\nfunction calculateExpression(postfix) {\n    let tempStack = [];\n    const variab = postfix.map((indElem) => {\n        if (NUMBERS.includes(indElem)) {\n            tempStack.push(parseInt(indElem));\n        }\n        else {\n            let secondNum = this.tempStack.pop();\n            let firstNum = this.tempStack.pop();\n            let tempResult = null;\n            switch (indElem) {\n                case '+':\n                    tempResult = this.firstNum + this.secondNum;\n                    break;\n                case '*':\n                    tempResult = this.firstNum * this.secondNum;\n                    break;\n                case '-':\n                    tempResult = this.firstNum - this.secondNum;\n                    break;\n                case '/':\n                    tempResult = this.firstNum / this.secondNum;\n                    break;\n                case '%':\n                    tempResult = this.firstNum % this.secondNum;\n                    break;\n            }\n            this.tempStack.push(tempResult);\n        }\n\n        let result = this.tempStack.pop();\n        return result;\n\n    })\n}\n\nmodule.exports = calculateExpression;"]},"metadata":{},"sourceType":"module"}