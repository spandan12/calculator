{"ast":null,"code":"const NUMBERS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\nfunction calculateExpression(postfix) {\n  console.log(postfix);\n  let tempStack = [];\n  const variab = postfix.map(indElem => {\n    // console.log(tempStack);\n    if (NUMBERS.includes(indElem)) {\n      tempStack.push(parseInt(indElem));\n    } else {\n      let secondNum = tempStack.pop();\n      let firstNum = tempStack.pop();\n      let tempResult = null;\n\n      switch (indElem) {\n        case '+':\n          tempResult = firstNum + secondNum;\n          break;\n\n        case '*':\n          tempResult = firstNum * secondNum;\n          break;\n\n        case '-':\n          tempResult = firstNum - secondNum;\n          break;\n\n        case '/':\n          tempResult = firstNum / secondNum;\n          break;\n\n        case '%':\n          tempResult = firstNum % secondNum;\n          break;\n      }\n\n      tempStack.push(tempResult);\n    }\n  });\n  let result = tempStack.pop();\n  return result;\n}\n\nmodule.exports = calculateExpression;","map":{"version":3,"sources":["/home/spandan/projects-practice/calculator/src/implementation/calculate.js"],"names":["NUMBERS","calculateExpression","postfix","console","log","tempStack","variab","map","indElem","includes","push","parseInt","secondNum","pop","firstNum","tempResult","result","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CACZ,GADY,EACP,GADO,EACF,GADE,EACG,GADH,EACQ,GADR,EACa,GADb,EACkB,GADlB,EACuB,GADvB,EAC4B,GAD5B,EACiC,GADjC,CAAhB;;AAGA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,MAAIG,SAAS,GAAG,EAAhB;AACA,QAAMC,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAaC,OAAD,IAAa;AACpC;AACA,QAAIR,OAAO,CAACS,QAAR,CAAiBD,OAAjB,CAAJ,EAA+B;AAC3BH,MAAAA,SAAS,CAACK,IAAV,CAAeC,QAAQ,CAACH,OAAD,CAAvB;AAEH,KAHD,MAIK;AACD,UAAII,SAAS,GAAGP,SAAS,CAACQ,GAAV,EAAhB;AACA,UAAIC,QAAQ,GAAGT,SAAS,CAACQ,GAAV,EAAf;AACA,UAAIE,UAAU,GAAG,IAAjB;;AAEA,cAAQP,OAAR;AACI,aAAK,GAAL;AACIO,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;AAfR;;AAiBAP,MAAAA,SAAS,CAACK,IAAV,CAAeK,UAAf;AACH;AAEJ,GA/Bc,CAAf;AAgCA,MAAIC,MAAM,GAAGX,SAAS,CAACQ,GAAV,EAAb;AACA,SAAOG,MAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBjB,mBAAjB","sourcesContent":["const NUMBERS = [\n    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'\n];\nfunction calculateExpression(postfix) {\n    console.log(postfix);\n    let tempStack = [];\n    const variab = postfix.map((indElem) => {\n        // console.log(tempStack);\n        if (NUMBERS.includes(indElem)) {\n            tempStack.push(parseInt(indElem));\n\n        }\n        else {\n            let secondNum = tempStack.pop();\n            let firstNum = tempStack.pop();\n            let tempResult = null;\n\n            switch (indElem) {\n                case '+':\n                    tempResult = firstNum + secondNum;\n                    break;\n                case '*':\n                    tempResult = firstNum * secondNum;\n                    break;\n                case '-':\n                    tempResult = firstNum - secondNum;\n                    break;\n                case '/':\n                    tempResult = firstNum / secondNum;\n                    break;\n                case '%':\n                    tempResult = firstNum % secondNum;\n                    break;\n            }\n            tempStack.push(tempResult);\n        }\n\n    })\n    let result = tempStack.pop();\n    return result;\n}\n\nmodule.exports = calculateExpression;"]},"metadata":{},"sourceType":"module"}