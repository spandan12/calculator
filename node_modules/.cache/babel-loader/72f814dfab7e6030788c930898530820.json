{"ast":null,"code":"const NUMBERS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\nclass PostfixEquation {\n  constructor(infix) {\n    this.infix = infix;\n    this.priority0 = ['+', '-'];\n    this.priority1 = ['*', '/'];\n    this.priority2 = ['%'];\n    this.tempStack = [];\n    this.outputStack = [];\n  }\n\n  findCompareValue(x) {\n    if (this.priority0.includes(x)) {\n      return 0;\n    } else if (this.priority1.includes(x)) {\n      return 1;\n    } else if (this.priority2.includes(x)) {\n      return 2;\n    }\n  }\n\n  replaceHigherOperator(x) {\n    let lastElement = this.tempStack.pop();\n\n    if (this.findCompareValue(x) <= this.findCompareValue(lastElement)) {\n      this.outputStack.push(lastElement);\n      this.tempStack.push(individualElem);\n    } else {\n      this.tempStack.push(lastElement);\n      this.tempStack.push(individualElem);\n    }\n  }\n\n  covertToEquation() {\n    const variab = this.infix.map(individualElem => {\n      if (NUMBERS.includes(individualElem)) {\n        this.outputStack.push(individualElem);\n      } else {\n        let tempLength = this.tempStack.length;\n\n        if (tempLength == 0) {\n          this.tempStack.push(individualElem);\n        } else {\n          this.replaceHigherOperator(individualElem);\n        }\n      }\n    });\n    console.log(this.outputStack, this.tempStack);\n  }\n\n}\n\nexport default PostfixEquation;","map":{"version":3,"sources":["/home/spandan/projects-practice/calculator/src/implementation/postfixEquation.js"],"names":["NUMBERS","PostfixEquation","constructor","infix","priority0","priority1","priority2","tempStack","outputStack","findCompareValue","x","includes","replaceHigherOperator","lastElement","pop","push","individualElem","covertToEquation","variab","map","tempLength","length","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CACZ,GADY,EACP,GADO,EACF,GADE,EACG,GADH,EACQ,GADR,EACa,GADb,EACkB,GADlB,EACuB,GADvB,EAC4B,GAD5B,EACiC,GADjC,CAAhB;;AAGA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiB,CACb,GADa,EACR,GADQ,CAAjB;AAGA,SAAKC,SAAL,GAAiB,CACb,GADa,EACR,GADQ,CAAjB;AAGA,SAAKC,SAAL,GAAiB,CACb,GADa,CAAjB;AAGA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACH;;AAEDC,EAAAA,gBAAgB,CAACC,CAAD,EAAI;AAChB,QAAI,KAAKN,SAAL,CAAeO,QAAf,CAAwBD,CAAxB,CAAJ,EAAgC;AAC5B,aAAO,CAAP;AACH,KAFD,MAGK,IAAI,KAAKL,SAAL,CAAeM,QAAf,CAAwBD,CAAxB,CAAJ,EAAgC;AACjC,aAAO,CAAP;AACH,KAFI,MAGA,IAAI,KAAKJ,SAAL,CAAeK,QAAf,CAAwBD,CAAxB,CAAJ,EAAgC;AACjC,aAAO,CAAP;AACH;AACJ;;AAEDE,EAAAA,qBAAqB,CAACF,CAAD,EAAI;AACrB,QAAIG,WAAW,GAAG,KAAKN,SAAL,CAAeO,GAAf,EAAlB;;AAEA,QAAI,KAAKL,gBAAL,CAAsBC,CAAtB,KAA4B,KAAKD,gBAAL,CAAsBI,WAAtB,CAAhC,EAAoE;AAChE,WAAKL,WAAL,CAAiBO,IAAjB,CAAsBF,WAAtB;AACA,WAAKN,SAAL,CAAeQ,IAAf,CAAoBC,cAApB;AACH,KAHD,MAIK;AACD,WAAKT,SAAL,CAAeQ,IAAf,CAAoBF,WAApB;AACA,WAAKN,SAAL,CAAeQ,IAAf,CAAoBC,cAApB;AACH;AACJ;;AAEDC,EAAAA,gBAAgB,GAAG;AACf,UAAMC,MAAM,GAAG,KAAKf,KAAL,CAAWgB,GAAX,CAAgBH,cAAD,IAAoB;AAC9C,UAAIhB,OAAO,CAACW,QAAR,CAAiBK,cAAjB,CAAJ,EAAsC;AAClC,aAAKR,WAAL,CAAiBO,IAAjB,CAAsBC,cAAtB;AACH,OAFD,MAGK;AACD,YAAII,UAAU,GAAG,KAAKb,SAAL,CAAec,MAAhC;;AACA,YAAID,UAAU,IAAI,CAAlB,EAAqB;AACjB,eAAKb,SAAL,CAAeQ,IAAf,CAAoBC,cAApB;AACH,SAFD,MAGK;AACD,eAAKJ,qBAAL,CAA2BI,cAA3B;AAGH;AAEJ;AAEJ,KAjBc,CAAf;AAkBAM,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,WAAjB,EAA8B,KAAKD,SAAnC;AACH;;AA7DiB;;AAgEtB,eAAeN,eAAf","sourcesContent":["const NUMBERS = [\n    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'\n];\nclass PostfixEquation {\n    constructor(infix) {\n        this.infix = infix;\n        this.priority0 = [\n            '+', '-'\n        ]\n        this.priority1 = [\n            '*', '/'\n        ]\n        this.priority2 = [\n            '%'\n        ]\n        this.tempStack = [];\n        this.outputStack = [];\n    }\n\n    findCompareValue(x) {\n        if (this.priority0.includes(x)) {\n            return 0;\n        }\n        else if (this.priority1.includes(x)) {\n            return 1;\n        }\n        else if (this.priority2.includes(x)) {\n            return 2;\n        }\n    }\n\n    replaceHigherOperator(x) {\n        let lastElement = this.tempStack.pop();\n\n        if (this.findCompareValue(x) <= this.findCompareValue(lastElement)) {\n            this.outputStack.push(lastElement);\n            this.tempStack.push(individualElem);\n        }\n        else {\n            this.tempStack.push(lastElement);\n            this.tempStack.push(individualElem);\n        }\n    }\n\n    covertToEquation() {\n        const variab = this.infix.map((individualElem) => {\n            if (NUMBERS.includes(individualElem)) {\n                this.outputStack.push(individualElem);\n            }\n            else {\n                let tempLength = this.tempStack.length;\n                if (tempLength == 0) {\n                    this.tempStack.push(individualElem);\n                }\n                else {\n                    this.replaceHigherOperator(individualElem); \n\n\n                }\n\n            }\n\n        });\n        console.log(this.outputStack, this.tempStack);\n    }\n}\n\nexport default PostfixEquation;"]},"metadata":{},"sourceType":"module"}