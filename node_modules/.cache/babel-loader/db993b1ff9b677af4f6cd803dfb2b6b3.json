{"ast":null,"code":"const NUMBERS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\nclass PostfixEquation {\n  constructor(infix) {\n    this.infix = infix;\n    this.priority0 = ['+', '-'];\n    this.priority1 = ['*', '/'];\n    this.priority2 = ['%'];\n    this.tempStack = [];\n    this.outputStack = [];\n  }\n\n  findCompareValue(x) {\n    if (this.priority0.includes(x)) {\n      return 0;\n    } else if (this.priority1.includes(x)) {\n      return 1;\n    } else if (this.priority2.includes(x)) {\n      return 2;\n    }\n  }\n\n  compareOperator(x, y) {}\n\n  covertToEquation() {\n    const variab = this.infix.map(individualElem => {\n      if (NUMBERS.includes(individualElem)) {\n        this.outputStack.push(individualElem);\n      }\n    });\n    console.log(this.outputStack);\n  }\n\n}\n\nexport default PostfixEquation;","map":{"version":3,"sources":["/home/spandan/projects-practice/calculator/src/implementation/postfixEquation.js"],"names":["NUMBERS","PostfixEquation","constructor","infix","priority0","priority1","priority2","tempStack","outputStack","findCompareValue","x","includes","compareOperator","y","covertToEquation","variab","map","individualElem","push","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CACZ,GADY,EACP,GADO,EACF,GADE,EACG,GADH,EACQ,GADR,EACa,GADb,EACkB,GADlB,EACuB,GADvB,EAC4B,GAD5B,EACiC,GADjC,CAAhB;;AAGA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiB,CACb,GADa,EACR,GADQ,CAAjB;AAGA,SAAKC,SAAL,GAAiB,CACb,GADa,EACR,GADQ,CAAjB;AAGA,SAAKC,SAAL,GAAiB,CACb,GADa,CAAjB;AAGA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACH;;AAEDC,EAAAA,gBAAgB,CAACC,CAAD,EAAG;AACf,QAAG,KAAKN,SAAL,CAAeO,QAAf,CAAwBD,CAAxB,CAAH,EAA8B;AAC1B,aAAO,CAAP;AACH,KAFD,MAGK,IAAG,KAAKL,SAAL,CAAeM,QAAf,CAAwBD,CAAxB,CAAH,EAA8B;AAC/B,aAAO,CAAP;AACH,KAFI,MAGA,IAAG,KAAKJ,SAAL,CAAeK,QAAf,CAAwBD,CAAxB,CAAH,EAA8B;AAC/B,aAAO,CAAP;AACH;AACJ;;AAEDE,EAAAA,eAAe,CAACF,CAAD,EAAIG,CAAJ,EAAO,CAErB;;AAEDC,EAAAA,gBAAgB,GAAG;AACf,UAAMC,MAAM,GAAG,KAAKZ,KAAL,CAAWa,GAAX,CAAgBC,cAAD,IAAoB;AAC9C,UAAIjB,OAAO,CAACW,QAAR,CAAiBM,cAAjB,CAAJ,EAAsC;AAClC,aAAKT,WAAL,CAAiBU,IAAjB,CAAsBD,cAAtB;AACH;AACJ,KAJc,CAAf;AAQAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,WAAjB;AACH;;AA1CiB;;AA6CtB,eAAeP,eAAf","sourcesContent":["const NUMBERS = [\n    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'\n];\nclass PostfixEquation {\n    constructor(infix) {\n        this.infix = infix;\n        this.priority0 = [\n            '+', '-'\n        ]\n        this.priority1 = [\n            '*', '/'\n        ]\n        this.priority2 = [\n            '%'\n        ]\n        this.tempStack = [];\n        this.outputStack = [];\n    }\n\n    findCompareValue(x){\n        if(this.priority0.includes(x)){\n            return 0;\n        }\n        else if(this.priority1.includes(x)){\n            return 1;\n        }\n        else if(this.priority2.includes(x)){\n            return 2;\n        }\n    }\n\n    compareOperator(x, y) {\n        \n    }\n\n    covertToEquation() {\n        const variab = this.infix.map((individualElem) => {\n            if (NUMBERS.includes(individualElem)) {\n                this.outputStack.push(individualElem);\n            }\n        }\n\n\n        );\n        console.log(this.outputStack)\n    }\n}\n\nexport default PostfixEquation;"]},"metadata":{},"sourceType":"module"}