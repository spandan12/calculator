{"ast":null,"code":"function calculateExpression(postfix) {\n  let tempStack = [];\n  const variab = postfix.map(indElem => {\n    if (!isNaN(indElem)) {\n      tempStack.push(parseFloat(indElem));\n    } else {\n      let secondNum = tempStack.pop();\n      let firstNum = tempStack.pop();\n      let tempResult = null;\n\n      switch (indElem) {\n        case '+':\n          tempResult = firstNum + secondNum;\n          break;\n\n        case '*':\n          tempResult = firstNum * secondNum;\n          break;\n\n        case '-':\n          tempResult = firstNum - secondNum;\n          break;\n\n        case '/':\n          tempResult = firstNum / secondNum;\n          break;\n\n        case '%':\n          tempResult = firstNum % secondNum;\n          break;\n      }\n\n      tempStack.push(tempResult);\n    }\n  });\n  let result = tempStack.pop();\n  return result;\n}\n\nmodule.exports = calculateExpression;","map":{"version":3,"sources":["/home/spandan/projects-practice/calculatorApp/src/implementation/calculate.js"],"names":["calculateExpression","postfix","tempStack","variab","map","indElem","isNaN","push","parseFloat","secondNum","pop","firstNum","tempResult","result","module","exports"],"mappings":"AAAA,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AAClC,MAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,MAAM,GAAGF,OAAO,CAACG,GAAR,CAAaC,OAAD,IAAa;AACpC,QAAI,CAACC,KAAK,CAACD,OAAD,CAAV,EAAqB;AACjBH,MAAAA,SAAS,CAACK,IAAV,CAAeC,UAAU,CAACH,OAAD,CAAzB;AAEH,KAHD,MAIK;AACD,UAAII,SAAS,GAAGP,SAAS,CAACQ,GAAV,EAAhB;AACA,UAAIC,QAAQ,GAAGT,SAAS,CAACQ,GAAV,EAAf;AACA,UAAIE,UAAU,GAAG,IAAjB;;AAEA,cAAQP,OAAR;AACI,aAAK,GAAL;AACIO,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;;AACJ,aAAK,GAAL;AACIG,UAAAA,UAAU,GAAGD,QAAQ,GAAGF,SAAxB;AACA;AAfR;;AAiBAP,MAAAA,SAAS,CAACK,IAAV,CAAeK,UAAf;AACH;AAEJ,GA9Bc,CAAf;AA+BA,MAAIC,MAAM,GAAGX,SAAS,CAACQ,GAAV,EAAb;AACA,SAAOG,MAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBf,mBAAjB","sourcesContent":["function calculateExpression(postfix) {\n    let tempStack = [];\n    const variab = postfix.map((indElem) => {\n        if (!isNaN(indElem)) {\n            tempStack.push(parseFloat(indElem));\n\n        }\n        else {\n            let secondNum = tempStack.pop();\n            let firstNum = tempStack.pop();\n            let tempResult = null;\n\n            switch (indElem) {\n                case '+':\n                    tempResult = firstNum + secondNum;\n                    break;\n                case '*':\n                    tempResult = firstNum * secondNum;\n                    break;\n                case '-':\n                    tempResult = firstNum - secondNum;\n                    break;\n                case '/':\n                    tempResult = firstNum / secondNum;\n                    break;\n                case '%':\n                    tempResult = firstNum % secondNum;\n                    break;\n            }\n            tempStack.push(tempResult);\n        }\n\n    })\n    let result = tempStack.pop();\n    return result;\n}\n\nmodule.exports = calculateExpression;"]},"metadata":{},"sourceType":"module"}